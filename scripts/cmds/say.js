const fs = require("fs");
const axios = require("axios");
const googleTTS = require("google-tts-api");
const path = require("path");

// Banglish ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function convertBanglishToBangla(text) {
  const dictionary = {
    ami: "‡¶Ü‡¶Æ‡¶ø",
    tumi: "‡¶§‡ßÅ‡¶Æ‡¶ø",
    bhalo: "‡¶≠‡¶æ‡¶≤‡ßã",
    kemon: "‡¶ï‡ßá‡¶Æ‡¶®",
    achi: "‡¶Ü‡¶õ‡¶ø",
    jani: "‡¶ú‡¶æ‡¶®‡¶ø",
    kotha: "‡¶ï‡¶•‡¶æ",
    bolo: "‡¶¨‡¶≤‡ßã",
    kichu: "‡¶ï‡¶ø‡¶õ‡ßÅ",
    na: "‡¶®‡¶æ",
    chai: "‡¶ö‡¶æ‡¶á",
    amar: "‡¶Ü‡¶Æ‡¶æ‡¶∞",
    tomar: "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞",
    bhai: "‡¶≠‡¶æ‡¶á",
    dada: "‡¶¶‡¶æ‡¶¶‡¶æ",
    dadai: "‡¶¶‡¶æ‡¶¶‡¶æ‡¶á",
    bondhu: "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ",
    valo: "‡¶≠‡¶æ‡¶≤‡ßã",
    korbo: "‡¶ï‡¶∞‡¶¨‡ßã",
    koro: "‡¶ï‡¶∞‡ßá‡¶æ",
    ekhane: "‡¶è‡¶ñ‡¶æ‡¶®‡ßá",
    ekhono: "‡¶è‡¶ñ‡¶®‡ßã"
  };
  const words = text.split(/\s+/);
  return words
    .map(word => dictionary[word.toLowerCase()] || word)
    .join(" ");
}

// ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá)
function detectLanguage(text) {
  const banglaRegex = /[\u0980-\u09FF]/;
  if (banglaRegex.test(text)) return "bn";

  // ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶π‡¶ú detect (en, ru, ko, ja, tl)
  const langCodes = ["ru", "en", "ko", "ja", "tl"];
  const firstWord = text.trim().split(/\s+/)[0].toLowerCase();

  if (langCodes.includes(firstWord)) {
    return firstWord;
  }
  return "en"; // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø
}

module.exports = {
  config: {
    name: "say",
    aliases: ["speak", "kotha", "bol"],
    version: "3.1",
    author: "Asif Mahmud",
    countDown: 5,
    role: 0,
    shortDescription: {
      en: "Convert text (Bangla, Banglish & multi-language) to voice",
      bn: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ-‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶ì ‡¶¨‡¶π‡ßÅ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡¶ï‡ßá ‡¶≠‡ßü‡ßá‡¶∏‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
    },
    longDescription: {
      en: "Bot will speak your Bangla, Banglish or multi-language text using Google TTS with language detection and reply support.",
      bn: "‡¶¨‡¶ü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ-‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶¨‡¶æ ‡¶¨‡¶π‡ßÅ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü Google TTS ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡¶¨‡ßá‡•§"
    },
    category: "media",
    guide: {
      en: "{pn} <lang code (optional)> <your text>",
      bn: "{pn} <‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)> <‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü>"
    }
  },

  onStart: async function({ args, message, event }) {
    try {
      let text = "";
      // reply message ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶®‡ßá‡¶¨‡ßá, ‡¶®‡¶æ‡¶π‡¶≤‡ßá args ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶¨‡ßá
      if (event.type === "message_reply" && event.messageReply && event.messageReply.body) {
        text = event.messageReply.body;
      } else {
        text = args.join(" ");
      }

      if (!text) return message.reply("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!");

      // language detect + lang code strip
      let lang = detectLanguage(text);
      if (["ru", "en", "ko", "ja", "tl"].includes(lang)) {
        // ‡¶Ø‡¶¶‡¶ø ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßã‡¶° detect ‡¶π‡ßü, ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶á ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶¨‡ßá
        const splitText = text.trim().split(/\s+/);
        splitText.shift();
        text = splitText.join(" ");
      }

      // Banglish ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∂‡¶® ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      if (lang === "bn") {
        text = convertBanglishToBangla(text);
      }

      // google-tts-api ‡¶¶‡¶ø‡ßü‡ßá TTS URL ‡¶§‡ßà‡¶∞‡¶ø
      const url = googleTTS.getAudioUrl(text, {
        lang,
        slow: false,
        host: "https://translate.google.com",
      });

      // ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ path
      const cacheDir = path.join(__dirname, "cache");
      if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });
      const filepath = path.join(cacheDir, `say_${event.threadID}_${event.messageID}.mp3`);

      // MP3 ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
      const res = await axios.get(url, { responseType: "arraybuffer" });
      fs.writeFileSync(filepath, Buffer.from(res.data, "binary"));

      // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏
      await message.reply({
        body: `üîä ‡¶¨‡¶≤‡¶≤‡¶æ‡¶Æ: ${text}`,
        attachment: fs.createReadStream(filepath)
      });

      // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
      fs.unlink(filepath, err => {
        if (err) console.error("Failed to delete TTS file:", err);
      });
    } catch (error) {
      console.error("‚ùå Say command error:", error);
      return message.reply("‚ùå ‡¶≠‡ßü‡ßá‡¶∏ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
  }
};
