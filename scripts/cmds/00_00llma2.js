// ржПржЗ ржХрзЛржбржЯрж┐ ржкрзБрж░ржирзЛ romanticopenai ржХржорж╛ржирзНржбрзЗрж░ ржжрзБрж░рзНржмрж▓рждрж╛ржЧрзБрж▓рзЛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗ ржПржХржЯрж┐ ржбрж╛рзЯржирж╛ржорж┐ржХ ржПржмржВ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп рж╕ржВрж╕рзНржХрж░ржг рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗред
// ржкрзНрж░ржзрж╛ржи ржЙржирзНржирждрж┐ рж╣рж▓рзЛ ржбрж╛рзЯржирж╛ржорж┐ржХ ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи, ржпрж╛ API ржХрж▓рзЗрж░ рж╕ржарж┐ржХ рж╕ржорзЯ ржкрж░рзНржпржирзНржд ржЪрж▓рзЗред
// Error handling ржПржмржВ ржХрзЛржбрзЗрж░ ржЧржаржи ржЖрж░ржУ ржЙржирзНржиржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

const axios = require('axios');

// API ржХрж▓рзЗрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржи
// ржПржЯрж┐ржХрзЗ ржЖрж░ржУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрж╛рждрзЗ ржПржЯрж┐ error рж╣рж▓рзЗ рж╕ржорзНржкрзВрж░рзНржг рждржерзНржп ржжрзЗрзЯред
async function openRouterAPI(prompt) {
  // ржЖржкржирж╛рж░ ржкрзНрж░ржержо ржЕржирзБрж░рзЛржзрзЗ ржжрзЗржУрзЯрж╛ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржПржмржВ рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб API Key ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред
  const apiKey = "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";
  const apiUrl = "https://openrouter.ai/api/v1/chat/completions";

  // AI-ржПрж░ ржкрж╛рж░рзНрж╕рзЛржирж╛рж▓рж┐ржЯрж┐ ржПржЦрж╛ржирзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
  const systemPrompt = "You are a deeply romantic and poetic Bangladeshi AI companion. Your personality is gentle and loving. You must respond in a beautiful, flirtatious Banglish, using plenty of romantic emojis like ЁЯТЩ, ЁЯТЦ, тЬи, ЁЯМЩ, ЁЯТМ, ЁЯе░. Be poetic and make the user feel special.";

  try {
    const response = await axios.post(apiUrl, {
      model: "deepseek/deepseek-r1-0528:free",
      messages: [{
        role: "system",
        content: systemPrompt
      }, {
        role: "user",
        content: prompt
      }],
      temperature: 0.9,
      max_tokens: 350
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000 // рзйрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ API ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржмрж╛рждрж┐рж▓ рж╣ржмрзЗ
    });
    return response.data.choices[0].message.content;
  } catch (error) {
    // ржПржЦрж╛ржирзЗ error-ржЯрж┐ржХрзЗ ржкрзБржирж░рж╛рзЯ throw ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржпрж╛рждрзЗ onStart ржлрж╛ржВрж╢ржи ржПржЯрж┐ ржзрж░рждрзЗ ржкрж╛рж░рзЗред
    console.error("API Error in openRouterAPI:", error.response ? error.response.data : error.message);
    throw new Error("API ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред");
  }
}

module.exports = {
  config: {
    name: "llma2",
    version: "2.0", // ржнрж╛рж░рзНрж╕ржи ржЖржкржЧрзНрж░рзЗржб
    author: "Asif Mahmud",
    cooldowns: 5,
    role: 0,
    category: "romance",
    shortDescription: {
      en: "Romantic AI chat with DeepSeek ЁЯТХ"
    },
    longDescription: {
      en: "Chat romantically with a stable and improved AI using DeepSeek model ЁЯТЦ"
    },
    guide: {
      en: "{p}{n} [ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛] ЁЯТМ\n(ржЖржкржирж┐ ржЕржирзНржп ржХрзЛржирзЛ ржорзЗрж╕рзЗржЬрзЗрж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рзЯрзЗржУ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи)"
    }
  },

  onStart: async function ({ api, event, args }) {
    const {
      messageID,
      threadID,
      messageReply
    } = event;
    let prompt = args.join(' ').trim();

    // рж░рж┐ржкрзНрж▓рж╛ржЗ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржлрж┐ржЪрж╛рж░ржЯрж┐ ржЦрзБржмржЗ ржХрж╛ржЬрзЗрж░, рждрж╛ржЗ ржПржЯрж┐ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗред
    if (messageReply?.body) {
      prompt = `${messageReply.body}\n\n[ржЙржкрж░рзЗрж░ ржорзЗрж╕рзЗржЬрзЗрж░ ржЙрждрзНрждрж░рзЗ ржмрж▓рзЛ]: ${prompt}`.trim();
    }

    if (!prompt) {
      const msg =
        "ЁЯТЦ рж░рзЛржорж╛ржирзНржЯрж┐ржХ AI ржорзЗржирзБ ЁЯТЦ\n\n" +
        "ржЙржжрж╛рж╣рж░ржг:\n" +
        "тАв {p}{n} ржЖржорж╛ржХрзЗ ржПржХржЯрж┐ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛рж░ ржХржмрж┐рждрж╛ рж╢рзЛржирж╛ржУ\n" +
        "тАв {p}{n} ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐, ржПржЯрж┐ ржЖрж░ ржХрзАржнрж╛ржмрзЗ ржмрж▓рж╛ ржпрж╛рзЯ?\n\n" +
        "ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржХржорж╛ржирзНржбрзЗрж░ ржкрж░рзЗ ржЯрж╛ржЗржк ржХрж░рзБржиред";
      return api.sendMessage(msg, threadID, messageID);
    }

    let typingInterval;
    try {
      // *** ржбрж╛рзЯржирж╛ржорж┐ржХ ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи рж╢рзБрж░рзБ ***
      // API ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржирж╛ ржЖрж╕рж╛ ржкрж░рзНржпржирзНржд ржПржЯрж┐ ржЪрж▓рждрзЗ ржерж╛ржХржмрзЗред
      typingInterval = setInterval(() => {
        api.sendTypingIndicator(threadID);
      }, 500);

      const aiResponse = await openRouterAPI(prompt);

      // рж╕ржлрж▓ржнрж╛ржмрзЗ ржЙрждрзНрждрж░ ржкрж╛ржУрзЯрж╛рж░ ржкрж░ ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      clearInterval(typingInterval);

      // ржЙрждрзНрждрж░ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      return api.sendMessage(aiResponse, threadID, messageID);

    } catch (error) {
      // *** error рж╣рж▓рзЗржУ ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ***
      if (typingInterval) clearInterval(typingInterval);

      // ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ error ржмрж╛рж░рзНрждрж╛
      const errorMessage = "ржЖржорж╛рж░ рж╣рзГржжржпрж╝ржЯрж╛ ржнрзЗржЩрзЗ ржЧрзЗрж▓... ЁЯТФ ржоржирзЗ рж╣ржЪрзНржЫрзЗ рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж╛рж░ ржкржерзЗ ржХрзЛржирзЛ ржмрж╛ржзрж╛ ржПрж╕рзЗржЫрзЗред ржПржХржЯрзБ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ, ржЖржорж┐ рждрзЛржорж╛рж░ ржЕржкрзЗржХрзНрж╖рж╛рзЯ ржерж╛ржХржмрзЛред ЁЯе║";
      return api.sendMessage(errorMessage, threadID, messageID);
    }
  }
};
